{"version":3,"sources":["webpack://dionejm.github.io/./src/components/blog/home-footer.js","webpack://dionejm.github.io/./src/components/blog/post-link.js","webpack://dionejm.github.io/./src/components/blog/post-list.js","webpack://dionejm.github.io/./src/gatsby-theme-blog/components/posts.js","webpack://dionejm.github.io/./src/components/blog/posts.js","webpack://dionejm.github.io/./node_modules/gatsby-theme-blog-core/src/templates/posts-query.js","webpack://dionejm.github.io/./node_modules/gatsby-theme-blog/src/gatsby-theme-blog-core/components/posts.js","webpack://dionejm.github.io/./src/components/blog/layout.js","webpack://dionejm.github.io/./src/components/blog/seo.js"],"names":["socialLinks","getThemeColor","useThemeColors","css","mt","pt","Date","getFullYear","style","color","href","map","platform","i","arr","Fragment","key","url","target","rel","name","length","title","slug","date","excerpt","sx","mb","as","Link","textDecoration","to","posts","node","location","siteTitle","display","flexDirection","justifyContent","minHeight","data","site","allBlogPost","nodes","siteMetadata","social","children","props","colorMode","useColorMode","theme","defaultTheme","mx","px","py","margin","padding","maxWidth","SEO","description","lang","meta","imageSource","imageAlt","useStaticQuery","metaDescription","image","siteUrl","imageAltText","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"gPAsCA,EAlCe,SAAC,GAAqB,IAAnBA,EAAkB,EAAlBA,YACNC,GAAkBC,SAAlBD,cACV,OAAO,kBAAQE,KAAKA,OAAI,CACpBC,GAAI,EACJC,GAAI,KAFD,MAKF,IAAIC,MAAOC,cALT,oBAOL,QAAC,OAAD,CAAUC,MAAO,CAACC,MAAOR,EAAc,eAAeS,KAAK,4BAA3D,UAPK,YASJV,EACGA,EAAYW,KAAI,SAACC,EAAUC,EAAGC,GAAd,OACd,QAAC,EAAAC,SAAD,CAAUC,IAAKJ,EAASK,MACtB,QAAC,OAAD,CACEP,KAAME,EAASK,IACfT,MAAO,CACHC,MAAOR,EAAc,eAEzBiB,OAAO,SACPC,IAAI,uBAEHP,EAASQ,MAEXN,EAAIO,OAAS,IAAMR,IAClB,QAAC,EAAAE,SAAD,sBAMN,O,8BCER,EA9BiB,SAAC,GAAkC,IAAjCO,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAE1BxB,GAAkBC,SAAlBD,cAER,OAAO,wBACH,uBACI,QAAC,QAAD,CACIyB,GAAI,CACAC,GAAI,KAGR,QAAC,OAAD,CACIC,GAAIC,KACJH,GAAI,CACAI,eAAe,OACfrB,MAAOR,EAAc,oBAEzB8B,GAAIR,GAEHD,GAASC,KAGlB,qBAAQC,KAEZ,wBACI,QAAC,OAAD,KAAWC,MCpBvB,EARiB,SAAC,GAAD,IAAGO,EAAH,EAAGA,MAAH,OACf,wBACGA,EAAMrB,KAAI,SAACsB,GAAD,OACT,QAAC,GAAD,QAAUjB,IAAKiB,EAAKV,MAAUU,SCJpC,ECIc,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUF,EAAZ,EAAYA,MAAOG,EAAnB,EAAmBA,UAAWnC,EAA9B,EAA8BA,YAA9B,OACV,QAAC,IAAD,CAAQkC,SAAUA,EAAUZ,MAAOa,IAC/B,eAAK3B,MAAO,CACR4B,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,UAAW,aAEX,oBACI,QAAC,IAAD,CAAKjB,MAAM,UACX,qBACI,QAAC,EAAD,CAAUU,MAAOA,OAGzB,oBACI,QAAC,EAAD,CAAQhC,YAAaA,QCnBrC,ECAqB,SAAC,GAAwB,IAAtBkC,EAAqB,EAArBA,SAAUM,EAAW,EAAXA,KACxBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,YACd,OACE,QAAC,EAAD,CACER,SAAUA,EACVF,MAAOU,EAAYC,MACnBR,UAAWM,EAAKG,aAAatB,MAC7BtB,YAAayC,EAAKG,aAAaC,W,mHCmBrC,IAtBmB,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAaC,GAAW,uBAClCC,GAAaC,UADqB,GAGzC,OACI,QAAC,IAAD,CAAeC,MAAOC,MAClB,QAAC,IAAD,OACA,QAAC,IAAWJ,IACZ,eAAKvC,MAAO,CACR4C,GAAG,OACHC,GAAI,EACJC,GAAI,EACJC,OAAO,YACPC,QAAQ,SACRC,SAAU,OAEV,oCAAoBT,GACnBF,M,2ECXjB,SAASY,EAAT,GAAyE,IAA1DC,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,KAAMvC,EAAgC,EAAhCA,MAAOwC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAClDtB,GAASuB,QAAe,aAAxBvB,KAeFwB,EAAkBN,GAAelB,EAAKG,aAAae,YACnDO,EAAQJ,EAAW,GAClBrB,EAAKG,aAAauB,QAAUL,EAC/B,KACEM,EAAeL,GAAYE,EAEjC,OACE,QAAC,IAAD,CACEI,eAAgB,CACdT,QAEFtC,MAAOA,EACPgD,cAAa,QAAU7B,EAAKG,aAAatB,MACzCuC,KAAM,CACJ,CACEzC,KAAK,cACLmD,QAASN,GAEX,CACEO,SAAS,WACTD,QAASjD,GAEX,CACEkD,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACEnD,KAAK,kBACLmD,QAAS9B,EAAKG,aAAa6B,QAE7B,CACErD,KAAK,gBACLmD,QAASjD,GAEX,CACEF,KAAK,sBACLmD,QAASN,IAGVS,OACCZ,EACI,CACE,CACE1C,KAAK,WACLmD,QAASL,GAEX,CACE9C,KAAK,eACLmD,QAASH,GAEX,CACEhD,KAAK,gBACLmD,QAASL,GAEX,CACE9C,KAAK,oBACLmD,QAASH,GAEX,CACEhD,KAAK,eACLmD,QAAQ,wBAGZ,CACE,CACEnD,KAAK,eACLmD,QAAQ,aAIjBG,OAAOb,KAKhBH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,IAWR","file":"component---node-modules-gatsby-theme-blog-core-src-templates-posts-query-js-467d7fe1b3d3a3aead79.js","sourcesContent":["import React, { Fragment } from \"react\"\nimport { Styled, css } from \"theme-ui\"\nimport useThemeColors from \"../../hooks/useThemeColors\";\n\nconst Footer = ({ socialLinks }) => {\n    const { getThemeColor } = useThemeColors();\n  return <footer css={css({\n      mt: 4,\n      pt: 3\n    })}\n  >\n    Â© {new Date().getFullYear()}, Powered by\n    {` `}\n    <Styled.a style={{color: getThemeColor('linkColour')}}href=\"https://www.gatsbyjs.com\">Gatsby</Styled.a>\n    {` `}&bull;{` `}\n    {socialLinks\n      ? socialLinks.map((platform, i, arr) => (\n          <Fragment key={platform.url}>\n            <Styled.a\n              href={platform.url}\n              style={{\n                  color: getThemeColor('linkColour')\n              }}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {platform.name}\n            </Styled.a>\n            {arr.length - 1 !== i && (\n              <Fragment>\n                {` `}&bull;{` `}\n              </Fragment>\n            )}\n          </Fragment>\n        ))\n      : null}\n  </footer>\n}\nexport default Footer\n","/** @jsx jsx */\nimport {Styled, jsx} from \"theme-ui\"\nimport {Link} from \"gatsby\"\nimport { useThemeUI } from 'theme-ui'\nimport useThemeColors from \"../../hooks/useThemeColors\";\n\n\nconst PostLink = ({title, slug, date, excerpt}) => {\n\n    const { getThemeColor } = useThemeColors();\n\n    return <article>\n        <header>\n            <Styled.h2\n                sx={{\n                    mb: 1,\n                }}\n            >\n                <Styled.a\n                    as={Link}\n                    sx={{\n                        textDecoration: `none`,\n                        color: getThemeColor('titleTextColour')\n                    }}\n                    to={slug}\n                >\n                    {title || slug}\n                </Styled.a>\n            </Styled.h2>\n            <small>{date}</small>\n        </header>\n        <section>\n            <Styled.p>{excerpt}</Styled.p>\n        </section>\n    </article>\n}\n\nexport default PostLink\n","import React from \"react\"\n\nimport PostLink from \"./post-link\"\n\nconst PostList = ({ posts }) => (\n  <>\n    {posts.map((node) => (\n      <PostLink key={node.slug} {...node} />\n    ))}\n  </>\n)\n\nexport default PostList\n","import React from \"react\"\nimport Posts from \"../../components/blog/posts\";\n\nexport default Posts\n","import React from \"react\"\n\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport Footer from \"./home-footer\"\nimport PostList from \"./post-list\"\n\nconst Posts = ({location, posts, siteTitle, socialLinks}) => (\n    <Layout location={location} title={siteTitle}>\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n            minHeight: 'inherit',\n        }}>\n            <div>\n                <SEO title=\"Home\"/>\n                <main>\n                    <PostList posts={posts}/>\n                </main>\n            </div>\n            <div>\n                <Footer socialLinks={socialLinks}/>\n            </div>\n        </div>\n    </Layout>\n)\n\nexport default Posts\n","import { graphql } from \"gatsby\"\nimport PostsPage from \"../components/posts\"\n\nexport default PostsPage\n\nexport const query = graphql`\n  query PostsQuery {\n    site {\n      siteMetadata {\n        title\n        social {\n          name\n          url\n        }\n      }\n    }\n    allBlogPost(sort: { fields: [date, title], order: DESC }, limit: 1000) {\n      nodes {\n        id\n        excerpt\n        slug\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Posts from \"../../components/posts\"\n\nconst PostsWrapper = ({ location, data }) => {\n  const { site, allBlogPost } = data\n  return (\n    <Posts\n      location={location}\n      posts={allBlogPost.nodes}\n      siteTitle={site.siteMetadata.title}\n      socialLinks={site.siteMetadata.social}\n    />\n  )\n}\n\nexport default PostsWrapper\n","import React from \"react\"\nimport Header from \"./header\"\nimport Helmet from \"../helmet/helmet\";\nimport {ThemeProvider, useColorMode} from \"theme-ui\";\nimport defaultTheme from \"../../gatsby-plugin-theme-ui\";\n\n\nconst BlogLayout = ({children, ...props}) => {\n    const [colorMode] = useColorMode()\n\n    return (\n        <ThemeProvider theme={defaultTheme}>\n            <Helmet/>\n            <Header {...props}/>\n            <div style={{\n                mx: `auto`,\n                px: 3,\n                py: 4,\n                margin: `3rem auto`,\n                padding: `0 1rem`,\n                maxWidth: 650,\n            }}>\n                <h3>Color Mode is: {colorMode}</h3>\n                {children}\n            </div>\n        </ThemeProvider>\n    )\n}\n\nexport default BlogLayout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title, imageSource, imageAlt }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image = imageSource\n    ? `${site.siteMetadata.siteUrl}${imageSource}`\n    : null\n  const imageAltText = imageAlt || metaDescription\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          imageSource\n            ? [\n                {\n                  name: `og:image`,\n                  content: image,\n                },\n                {\n                  name: `og:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:image`,\n                  content: image,\n                },\n                {\n                  name: `twitter:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:card`,\n                  content: `summary_large_image`,\n                },\n              ]\n            : [\n                {\n                  name: `twitter:card`,\n                  content: `summary`,\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n"],"sourceRoot":""}