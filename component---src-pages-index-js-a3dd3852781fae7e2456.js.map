{"version":3,"sources":["webpack://dionejm.github.io/./src/components/theme-selector-button.js","webpack://dionejm.github.io/./src/components/layout.js","webpack://dionejm.github.io/./src/pages/index.js","webpack://dionejm.github.io/./src/utils/theme-provider.js"],"names":["ThemeSelector","React","ThemeContext","colorMode","setColorMode","type","checked","onChange","ev","target","Layout","children","style","minHeight","backgroundColor","cssVars","margin","maxWidth","padding","color","Home","count","setCount","fontFamily","rel","href","onClick","cssVariableNames","titleTextColour","normalTextColour","linkColour","normalTextFont","quoteTextFont","getCssVar","variableName","ThemeProvider","window","useState","rawSetColorMode","root","document","documentElement","initialColorValue","getPropertyValue","Provider","value","themeMode","theme","localStorage","setItem","Object","keys","forEach","property","cssVariable","setProperty","updateThemeColors"],"mappings":"4LAGaA,EAAgB,WAAO,IAAD,EACGC,aAAiBC,MAA5CC,EADwB,EACxBA,UAAWC,EADa,EACbA,aAClB,OACI,sBACI,iBACIC,KAAK,WACLC,QAAuB,SAAdH,EACTI,SAAU,SAACC,GACPJ,EAAaI,EAAGC,OAAOH,QAAU,OAAS,YAE/C,IAPP,qB,0HCDO,SAASI,EAAT,GAA6B,IAAZC,EAAW,EAAXA,SAC5B,OACI,QAAC,KAAD,MACI,eAAKC,MAAO,CACRC,UAAU,QACVC,gBAAiBC,wBAEjB,eAAKH,MAAO,CACRI,OAAO,YACPC,SAAU,OACVC,QAAQ,SACRC,MAAOJ,yBAEP,QAAC,IAAD,MACCJ,KCZN,SAASS,IAAQ,IAAD,EACDnB,WAAe,GAAlCoB,EADoB,KACbC,EADa,KAE3B,OAAO,QAACZ,EAAD,MACH,eAAKE,MAAO,CACRO,MAAOJ,wBAEP,eAAKH,MAAO,CACRW,WAAYR,sBADhB,wCAKA,eAAKH,MAAO,CACRW,WAAYR,qBADhB,yCAMJ,oBACI,oBAEI,mCAAiB,aAAGS,IAAI,aAAaC,KAAM,SAA1B,WAErB,kBAAQC,QAAS,kBAAMJ,EAASD,EAAQ,KAAxC,UAAuDA,IACvD,qE,oJC1BCM,EAAmB,CAC5Bb,gBAAiB,qBACjBc,gBAAiB,qBACjBC,iBAAkB,sBAClBC,WAAY,oBACZC,eAAgB,qBAChBC,cAAe,qBAGbC,EAAY,SAACC,GAAD,aAAyBA,EAAzB,KAELnB,EAAU,CACnBD,gBAAiBmB,EAAUN,EAAiBb,iBAC5Cc,gBAAiBK,EAAUN,EAAiBC,iBAC5CC,iBAAkBI,EAAUN,EAAiBE,kBAC7CC,WAAYG,EAAUN,EAAiBG,YACvCC,eAAgBE,EAAUN,EAAiBI,gBAC3CC,cAAeC,EAAUN,EAAiBK,gBAIjC9B,EAAeD,kBACfkC,EAAgB,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAC5B,GAAI,oBAAOyB,OAAX,CAD2C,OAINC,cAAS,SAAvClC,EAJoC,KAIzBmC,EAJyB,KAKrCC,EAAOH,OAAOI,SAASC,gBAC7BxC,aAAgB,WACZ,IAAMyC,EAAoBH,EAAK3B,MAAM+B,iBACjC,wBAEJL,EAAgBI,KACjB,IAMH,OACI,QAACxC,EAAa0C,SAAd,CAAuBC,MAAO,CAAE1C,YAAWC,aAN1B,SAAC0C,GAClBR,EAAgBQ,GAWxB,SAA2BA,EAAWC,GAClC,IAAKA,GAAS,oBAAOX,OACjB,OAEJ,IAAMG,EAAOH,OAAOI,SAASC,gBAC7BO,aAAaC,QAAQ,aAAcH,GAEbI,OAAOC,KAAKJ,GAEpBK,SAAQ,SAAAC,GAClB,IAAMC,EAAc3B,EAAiB0B,GAChCC,GAGLf,EAAK3B,MAAM2C,YAAYD,EAAaP,EAAMM,OAxB1CG,CAAkBV,EAAyB,UAAdA,EAAwBC,WAAcA,cAK9DpC","file":"component---src-pages-index-js-a3dd3852781fae7e2456.js","sourcesContent":["import React from \"react\";\nimport {ThemeContext} from \"../utils/theme-provider\";\n\nexport const ThemeSelector = () => {\n    const {colorMode, setColorMode} = React.useContext(ThemeContext);\n    return (\n        <label>\n            <input\n                type=\"checkbox\"\n                checked={colorMode === 'dark'}\n                onChange={(ev) => {\n                    setColorMode(ev.target.checked ? 'dark' : 'light');\n                }}\n            />{' '}\n            Dark Toggle!!!!\n        </label>\n    );\n};","import React from \"react\"\nimport {cssVars, ThemeProvider} from \"../utils/theme-provider\";\nimport {ThemeSelector} from \"./theme-selector-button\";\n\n\nexport default function Layout({children}) {\n    return (\n        <ThemeProvider>\n            <div style={{\n                minHeight: `100vh`,\n                backgroundColor: cssVars.backgroundColor,\n            }}>\n                <div style={{\n                    margin: `3rem auto`,\n                    maxWidth: '33vw',\n                    padding: `0 1rem`,\n                    color: cssVars.normalTextColour,\n                }}>\n                    <ThemeSelector/>\n                    {children}\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}","import React from \"react\"\nimport '@fontsource/inter';\nimport '@fontsource/karla';\nimport Layout from \"../components/layout\";\nimport {cssVars} from \"../utils/theme-provider\";\n\n\nexport default function Home() {\n    const [count, setCount] = React.useState(0);\n    return <Layout>\n        <div style={{\n            color: cssVars.titleTextColour\n        }}>\n            <div style={{\n                fontFamily: cssVars.normalTextFont\n            }}>\n                Hello from Gatsby! This is in Inter\n            </div>\n            <div style={{\n                fontFamily: cssVars.quoteTextFont\n            }}>\n                Hello from Gatsby! This is in Karla\n            </div>\n        </div>\n        <div>\n            <div>\n\n                <h2>Check out my <a rel=\"stylesheet\" href={'/blog'}>blog</a></h2>\n            </div>\n            <button onClick={() => setCount(count + 1)}>{`Count: ${count}`}</button>\n            <p>Lorem ipsumfoiwejfoiewjgoiewjoigejoigejoijoi</p>\n        </div>\n    </Layout>\n}","import React, {useState} from \"react\"\n\nimport {theme} from \"../gatsby-plugin-theme-ui\";\n\nexport const cssVariableNames = {\n    backgroundColor: '--color-background',\n    titleTextColour: '--color-text-title',\n    normalTextColour: '--color-text-normal',\n    linkColour: '--color-text-link',\n    normalTextFont: '--normal-text-font',\n    quoteTextFont: '--quote-text-font'\n}\n\nconst getCssVar = (variableName) => `var(${variableName})`;\n\nexport const cssVars = {\n    backgroundColor: getCssVar(cssVariableNames.backgroundColor),\n    titleTextColour: getCssVar(cssVariableNames.titleTextColour),\n    normalTextColour: getCssVar(cssVariableNames.normalTextColour),\n    linkColour: getCssVar(cssVariableNames.linkColour),\n    normalTextFont: getCssVar(cssVariableNames.normalTextFont),\n    quoteTextFont: getCssVar(cssVariableNames.quoteTextFont),\n}\n\n\nexport const ThemeContext = React.createContext();\nexport const ThemeProvider = ({ children }) => {\n    if (typeof window === `undefined`) {\n        return;\n    }\n    const [colorMode, rawSetColorMode] = useState('light');\n    const root = window.document.documentElement;\n    React.useEffect(() => {\n        const initialColorValue = root.style.getPropertyValue(\n            '--initial-color-mode'\n        );\n        rawSetColorMode(initialColorValue);\n    }, []);\n    const setColorMode = (themeMode) => {\n        rawSetColorMode(themeMode);\n        updateThemeColors(themeMode, themeMode === 'light' ? theme.light : theme.dark);\n\n    };\n    return (\n        <ThemeContext.Provider value={{ colorMode, setColorMode }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n\nfunction updateThemeColors(themeMode, theme) {\n    if (!theme || typeof window === `undefined`) {\n        return;\n    }\n    const root = window.document.documentElement;\n    localStorage.setItem('color-mode', themeMode);\n\n    const cssProperties = Object.keys(theme);\n\n    cssProperties.forEach(property => {\n        const cssVariable = cssVariableNames[property];\n        if (!cssVariable) {\n            return;\n        }\n        root.style.setProperty(cssVariable, theme[property]);\n    })\n}\n\n"],"sourceRoot":""}